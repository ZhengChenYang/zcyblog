---
layout: post
title:  "基于CNN的手势识别"
date:   2018-04-13 20:20:09 +0800
categories: 小项目
tags: 机器学习 图像识别
---

# 简介 #
这是一个相对简单但又十分吸引人的机器学习项目。在 Python 中使用卷积神经网络构造模型，可以识别手势并将其转换为机器上的文本。
该项目存储库的作者用 Tensorflow 和 Keras 共同搭建了 CNN 模型，他特别详细地说明了他是怎么创建这个项目的，以及每一步是怎么进行的。  

# 原文翻译 #
翻译自github中readme。  

## 我所做的 ##
1. 第一件我所做的事情是，我用OpenCV创建了10个手势样本。每一个手势，我捕捉了50*50像素的1200张图片。所有这些图片都是灰度图，存储在 **gestures/folder** 文件下。 **gestures/0/**包含了1200张空图片，表示没有手势。同时我也意识到了保持这个目录的增长，我的模型的准确率可以从可笑的82%提高到99%。
2. 学习什么是CNN以及它是如何工作的。最好的资源在这里
[Tensorflow's official website]() 和 [machinelearningmastery.net]()。
3. 使用Tensorflow和Keras创建一个CNN，看起来和MNIST分类模型有些相似。如果你想要增加更多的手势，你最好自己给模型增加新的层数和调整一些参数。
4. 然后使用在视频流中用Keras训练好的模型。
5. 截止今天，我已经存储了45种手势，26个字母手势，10个美国手语和其他一些手势。并用这些图片来训练    

我留下了很多的细节。但是这些是基本的，主要的步骤。  

## 输出 ##
看[这里](https://www.youtube.com/watch?v=JNZ7oFaH1fg&feature=youtu.be)。

## 要求 ##
0. Python 3.x
1. Tensorflow 1.5
2. Keras
3. OpenCV 3.4
4. h5py
5. pyttsx3
6. 对以上五个主题有很好的把握。如果有问题可以参考网上。我自己也是新手
7. 一个好的CPU（最后是GPU咯）
8. 耐心...需要非常多

## 安装需求 ##
1. 根据你的系统开启cmd终端。
2. 如果你有一个NVidia GPU，确保你预先安装了TensorFlow GPU（参考官方网站）。然后使用下面这条命令。  
``` pip install -r requirements_gpu.txt ```  
3. 如果你没有GPU，使用下面这个命令  
``` pip install -r requirements_cpu.txt ```  

## 如何使用这个仓库 ##
在使用这个仓库前，让我提醒一些东西。你讲没有任何的交互接口告诉你要做什么。所以你不得不弄明白大多数的东西并且自己修改脚本如果有需要。但是这里有一个要点。要这样做，输入下面的命令，并且跟着下面的指令。
### 创建一个手势 ###
1. 首先设置手直方图。如果已经做好就不需要再调整。但是你需要调整如果周围照明情况发生改变。    
``` python set_hand_hist.py ```
* 窗口“设置手直方图”将出现
* “设置手直方图”将有50平方
* 把你的手放在方形中，确保手覆盖了整个方形。
* 按下‘c’,其他窗口会出现"Thresh"
* 在按压‘c’的时候，只有白色方块与图像部分对应，你的手的颜色应该出现在“Thresh"窗口中。
* 确保所有的方块被你的手覆盖。
* 如果不成功，移动你的手，重新按下‘c’。重复这一块知道你得到直方图。
* 在你得到一个好的直方图后，按下'S'保存这个直方图。所有的窗口会关闭。
2. 接下来就是创建你的手势。用下面的命令来做。在执行这个项目时，你需要输入手势数字和手势名字。然后OpenCV窗口叫做“捕捉手势”会出现。在摄像头，你会看见一个绿色的窗口（在窗口里，你需要做你的手势）和一个计数器记录你存储的图片数。  
``` python create_gestures.py  ```  
3. 按下‘c’当你准备好你的手势。捕捉手势会在几秒后开始。把你的手移到这移到那。你可以停止捕捉按下‘c’，继续捕捉按下‘c’。捕捉继续在几秒后。计数器到达1200的时候，窗口会自动关闭。
4. 当你增加新的手势，运行load_images.py文件。你不需要跑这个文件除非你增加新的手势  
``` python load_images.py ```  

### 显示所有的手势 ###
1. 为了看所有的手势，存放在**gestures/**文件夹下。执行这个命令  
``` python display_all_gestures.py ```

### 训练模型 ###
1. 可以用tensorflow或者keras来训练模型。如果你需要使用TensorFlow训练，运行**cnn_tf.py**文件。如果需要使用Keras训练，使用**cnn_keras.py**文件。
```
 	pyhton cnn_tf.py
	python cnn_keras.py
```
2. 如果你使用tensorflow，你要有检查点和元图文件在**tmp/cnn_model3**文件夹下。
3. 如果你使用Keras，你需要模型cnn_keras2.h5文件在根目录下。
你不需要每次重新训练。万一你要增加或者移除一个手势，需要重新训练。

### 测试手势 ###
在深入了解细节之前，我想要告诉你我不能用TensorFlow训练模型。这是因为我不知道如何使用它。我尝试使用predit()函数，但是每次把参数加载进内存，它报很大开销（神特么怎么翻译啊！）。请帮我如果你可以。在**recognize_gesture.py**文件，你可以找到用来预测的函数tf_predict()，不过从来没用。这就是为什么我最终使用Keras的模型，因为模型加载到内存和预测都非常简单。
## 创建一个手势 ###
1. 首先设置手直方图。如果已经做好就不需要再调整。但是你需要调整如果周围照明情况发生改变。    
``` python set_hand_hist.py ```
* 窗口“设置手直方图”将出现
* “设置手直方图”将有50平方
* 把你的手放在方形中，确保手覆盖了整个方形。
* 按下‘c’,其他窗口会出现"Thresh"
* 在按压‘c’的时候，只有白色方块与图像部分对应，你的手的颜色应该出现在“Thresh"窗口中。
* 确保所有的方块被你的手覆盖。
* 如果不成功，移动你的手，重新按下‘c’。重复这一块知道你得到直方图。
* 在你得到一个好的直方图后，按下'S'保存这个直方图。所有的窗口会关闭。
2. 开始**recognize_gesture.py**文件来识别  
``` python recognize_gesture.py ```  
3. 你有一个很小的绿色的盒子，在里面做你的手势

### 使用 fun_util.py ###
这是你可以得到乐子的地方。
1. 首先设置手直方图。如果已经做好就不需要再调整。但是你需要调整如果周围照明情况发生改变。    
``` python set_hand_hist.py ```
* 窗口“设置手直方图”将出现
* “设置手直方图”将有50平方
* 把你的手放在方形中，确保手覆盖了整个方形。
* 按下‘c’,其他窗口会出现"Thresh"
* 在按压‘c’的时候，只有白色方块与图像部分对应，你的手的颜色应该出现在“Thresh"窗口中。
* 确保所有的方块被你的手覆盖。
* 如果不成功，移动你的手，重新按下‘c’。重复这一块知道你得到直方图。
* 在你得到一个好的直方图后，按下'S'保存这个直方图。所有的窗口会关闭。
2. 开始文件  
``` python fun_util.py ```  

#### 文本模式（按下t到达文本模式）####
1. 在文本模式你可以创建你的文字通过手语拼写或者预定义的手势
2. 屏幕上的文字会被转换为语音在你的手一开绿盒子
3. 确保你的保持相同的手势在盒子中15帧，否则手势不会被转为文字

#### 计算器模式 ####
1. 确认一个数字，在20帧内保持相同的手势。在成功确认中，这个数字会出现在窗口黑色部分的垂直中心
2. 确认一个数字，做出”最好的运气“手势，并在绿盒子汇总保持25帧。你会习惯这个时间。
3. 在第一个数字和第二个数字汇总，你可以有任意的时间
4. 当前有是个运算符。
5. 在操作符悬着中，1 意味 '+', 2 意味 '-', 3 意味 '*', 4 意味 '/', 5 意味 '%', 6 意味 '**', 7 意味 '>>' or 右移运算符, 8 意味 '<<' or 左移运算符r, 9 意味 '&' or 按位 AND and 0 意味 '|' 或者 按位 OR.

# 依赖包 #
1. [h5py](http://docs.h5py.org/en/latest/quick.html#quick)  
Hierarchical Data Format(HDF)是一种针对大量数据进行组织和存储的文件格式。经历了20多年的发展，HDF格式的最新版本是HDF5，它包含了数据模型，库，和文件格式标准。以其便捷有效，移植性强，灵活可扩展的特点受到了广泛的关注和应用。
2. [cv2](https://docs.opencv.org/master/d6/d00/tutorial_py_root.html)  
opencv for python
3. [pickle](https://docs.python.org/3.5/library/pickle.html)  
pickle是python语言的一个标准模块，安装python后已包含pickle库，不需要单独再安装。
pickle模块实现了基本的数据序列化和反序列化。通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储；通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。
4. [sqlite3](https://docs.python.org/3.5/library/sqlite3.html)  
5. [numpy](https://docs.scipy.org/doc/)  
6. [os](https://docs.python.org/3.5/library/os.html)
7. [keras](http://keras-cn.readthedocs.io/en/latest/layers/core_layer/) 
8. [tensorflow](www.tensorflow.org/) 


# 代码分析 #

# 来源 #
[Sign-language: a simple project](https://github.com/EvilPort2/Sign-Language)  
[有意思的8个机器学习项目](https://yq.aliyun.com/articles/221708)
[每周一个python库](https://pymotw.com/3/index.html)