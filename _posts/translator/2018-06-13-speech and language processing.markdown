---
layout: post
title:  "自然语言处理综论第三版手稿翻译2"
date:   2018-06-13 16:20:09 +0800
categories: jekyll
published: true
---

# 正则表达，文本归一化 #  
词性
词干
&nbsp;&nbsp;上面的对话来自ELIZA,一种早期的自然语言处理系统，它可以通过模仿Rogerian心理治疗师的反应和用户进行有限的对话。ELIZA是一个非常简单的程序，它使用模式匹配来识别句子，像“You are X” 然后把它们转换成合适的输出，像“什么让你认为我是X?"这种简单的技术在这个领域的成功因为，ELIZA实际上不需要知道任何东西来模拟一个Rogerian心理治疗师。  
正如Weizenbaum指出，这是为数不多的对话类型之一，听众可以表现地他们对世界一无所知。Eliza对人类对话的模仿力非常地成功：许多和ELIZA交流过的人都相信它真的理解他们和他们的问题，许多人继续相信ELiza的能力即使项目的操作者解释给他们，即使在今天聊天机器人也是一种娱乐消遣。   
&nbsp;&nbsp;当然现代对话代理不仅仅是一种消遣，它们可以回答问题，订阅机票，查找饭店，各种更依赖于复杂的用户意图理解的功能，我们也会在29章看到。尽管如此，为ELIZA和其他聊天机器人提供动力的基于模式的简单方法在自然语言处理中起着至关重要的作用。
我们将从描述文本模式最重要的工具开始：正则表达式。正则表达式可以用来指定我们想要从文档中提取的字符串，从上面的Cliza中转发哦“you are X"到定义字符串，如 $199 和 $24.9，用于从文档中提取价格表。    
然后，我们转向一组统称为文本归一化的任务，正则表达式在其中扮演了重要角色。归一化文本意味着，转换为一种更为简便，标准的形式。例如，我们对语言所做的大部分工作都依赖于从运行的文本中分离和标记单词，即标记化任务。英语单词通常用空格来彼此分离，但是空格不总是足够的。New York和rock'n' roll有时候被作为大单词尽管实际上他们包含了空格，但是有时候我们需要分离I'm为两个单词 I 和 am。为了处理推特和文本，我需要将表情符号标记为 ：）或者便签，像#nlproc.一些语言，像中文，在两个字之间没有空格，所以单词标记变得更加困难。  
文本归一化的另一部分是词性还原，确定两个词有相同的词根，尽管他们在表面上存在差异。举例来说，单词sang,sung,sing都是动词sing的不同形式。单词sing是这些单词的公共词元，词形还原从这些词映射到sing。词形还原对于处理复杂的语言至关重要比如阿拉伯语。词干是指更简单的词形化版本，主要是从词尾删除后缀。文本归一化也包括了分句，把一段文本分成单独的句子，使用句号或感叹号等提示。  
最后，我们需要比较单词和其他字符串。我们会引入称为编辑距离的度量标准，它测量两个句子的相似度通过改变一个句子到另一个句子的编辑次数（插入，删除，添加）。编辑距离是一种应用于语言处理的算法，从拼写纠正到语音识别再到整体分辨率。

## 正则表达式 ##
在计算机科学标准化方面的一个为被人称道的成就是正则表达式，它是一种用来指定文本搜索字符串的语言。这种实用的语言在所有计算机语言，文字处理工具，文本处理工具如Unix工具grep或Emacs中使用。在形式上，正则表达式是表示一组字符串的代数表示法。他们尤其在搜索文本方面有用，当我们有模式和语料去搜索的时候。一个正则表达式搜索函数将搜索语料，返回所有匹配模式的文本。语料可以是一个单一的文本或者集合。举例来说，Unix命令行工具grep接受一个正则表达式，返回与表达式匹配的输入文档的每一行。  
一个搜索可以本设计为返回一行上的每一个匹配，如果有超过衣蛾匹配，或者只有一个匹配。在下面的例子中，我们将模式中与正则表达式匹配的部分下划线，只显示第一个。我们会展示由斜杠分割的正则表达式，但是注意，斜杠不是正则表达式中的一部分。最简单类型的正则表达式是一序列简单点的字符。为了搜索woochuck,我们输入/woodchuck/。表达式/Buttercup/匹配任意包含子串Buttercup;grep和那个表达式会返回I'm called little Buttercup的行。搜索字符串可以由一个单一字符组成，也可以由一系列的字符组成。  
正则表达式是大小写敏感的。小写/s/和大写/S是不同的。这意味着，模式/woodchucks/不会匹配字符串Woodchucks、 我们可以使用中括号[和]解决这个问题。字符串在括号中指定了要匹配字符的分离。举例来说，图2.2展示了模式/[wW]/匹配包含了含有w或者W的模式。  
正则表达式/[1234567890]/指定了任意的单一数字。虽然数字字母之类的字符是表达式的重要组成部分，但它们可能变得很笨拙。当有与一组字符相关联的定义良好的序列的情况下，可以使用括号和破折号来指定任意在范围内的字符。/[2-5]/模式指定任意一个字符2,3,4或者5。/[b-g]/模式指定b,c,d,e,f,g中的任意一个字符。其他例子在图2.3中展示。   
方括号还可以用来指定单个字符不能是什么，通过使用插入符号^。如果插入符是在开括号后面的第一符号，则结果的模式是被否定的。举例来说，模式/[^a]/匹配了任意字符，除了a。这只会发生在，插入符是开放方括号的第一个符号。如果发生在任意别的地方，它通常代表一个插入符。  
我们如何讨论可选元素，像一个在woodchuck和woodchucks中的s?我们不能使用方括号，因为，当他们允许我们说‘s 或者 S’,但是他们不能允许我们说's或者nothing“。为此，我们使用问号/?/，它意味着前一个字符或者都没有。   
我们可以认为问号意味着零或者前面字符的实例。这是一种方式指定有多少东西是我们需要的，一些在正则表达式中很重要的东西。例如，考虑某只绵羊的语言，它们由如下的字符串组成：  
baa!!  
baaa!!  
baaaa!!  
这种语言由含有a,b的字符串组成，后面至少跟着两个a，再跟着一个感叹号。一组运算符允许我们说出一些a之类的话，它们基于星号或者\*。Kleene星意味着”零或者更多出现在直接前面的字符或者正则表达式“。所以/a\*/以为这”有着0个或者更多个a的任意字符串"。这会匹配a或者aaaaaa,但是它会匹配OffMinor因为字符串OffMinor有0个a。所以用来匹配一个或者更多的a是/aa\*/,以为这一个a跟着0个或者更多的a。更多复杂的模式可以被重复。所以/[ab]\*/意味着“0或者更多的a或者b”。它会匹配字符串，像aaaa或者ababab或者bbbb。   
为了指定多个数字，我们可以扩展/[0-9]/,这是单个数字的正则表达式。一个整型是这样/[0-9]\*/。  
有的时候，给数字写两次正则表达式是令人厌烦，所以有一种更短的方式来指定某个字符的至少一个。这是Kleene+,它意味着“一个或者更多前面的字符”。因为，表达式/[0-9]+/是一种正常的方式。有两种方式来指定羊的语言:/baaa\*!/或者/baa+!/.  
一种重要特殊字符是句号/./,匹配如何单个字符（除了回车）的通配符表达式。  
通配符经常和\*一起使用来表示任何字符串。例如，假设我们想要找到任意一行特定的单词，例如，aardvark,显示两次。我们可以指定这个使用正则表达式/aardvark.*aarvark/.  
锚点是将正则表达式锚定到字符串中特定位置的特殊字符。最常见的锚是插入符号^和美元符号$。^匹配一行的开始。模式/^The/匹配这档次The只有在一行的开始。因而，插入符三种用途：匹配一行的开始，方括号内的否定，只是意味着一个插入符号。美元符号，匹配一行的尾部。所以模式$是一种用来匹配一个行尾空格的模式，/^The dog\.$/匹配一行只含有段落The dog(我们在这里需要使用反斜杠因为我们需要.代表句号而不是通配符)。  
有两种锚，\b陪单词边界，\B匹配一个没有边界。 因而/\bthe\b/匹配单词the,不是单词other。严格来说，一个正则表达式的单词定义为任何数字，下划线，字母的序列。这是基于编程语言中“词语”的定义。

### 析取，分组，有限 ###  
假设我们需要搜索关于宠物的信息;也许我们队猫和狗特备感兴趣。这种情况下，我们可能想要搜索字符串cat，或者字符串dog.因为我们不能使用方括号搜索猫或者狗，我们需要新的操作符，析取操作符，也叫管道符号|。模式/cat|dog/匹配字符串cat或者字符串dog。  
有时候，我们需要使用析取操作符在更大的序列中。例如，假定我想要给堂弟David搜索关于宠物鱼的信息。我该如何同时制定guppy和guppies？我们不能简单的说/guppy|ies/，因为他只会匹配字符串guppy和ies。这是因为像guppy这样的序列优先于析取运算符|。为了使析取运算符只应用到一个指定的模式，我们需要使用括号操作符(和)。将模式括到圆括号内，使其作为相邻操作符的单个字符。所以模式/gupp(y|ies)/会指定，我们的意思是析取只适用于y和ies的后缀。  
当我们使用计数器像\*，括号操作符(会非常的有用。不像|操作符，\*操作符默认下只应用于单一字符，不会整个序列。假设我们想要匹配字符串的重复实例。也许我们有一行有着列的标签形式Column1 Column2 Column3.表达式/Column [0-9]+ \*/不会匹配任意列数。相反，它将匹配单个列，然后是任意数量的空格。这里星号只适用于它前面的空格，而不是整个序列。使用括号，我们可以编写表达式 /(Column [0-9]+ \*)\*/ 来匹配单词Column，跟着一个数字和可选的空格，整个模式可以重复任意次数。  
一种运算符可能优先于另一种运算符，这要求我们有时使用圆括号来指定我们的意思，这种思想是由正则表达式的运算符优先级层次结构形式化的。  
因此，因为计数器的优先级比序列高，/the\*/匹配theeeee而不是thethe.因为序列的优先级比析取的优先级高，/the|any/匹配the或者any而不是theany.  
模式有的时候有点模棱两可，用另一方式的时候。考虑表达式/[a-y]\*/，当与文本进行匹配时。因为/[a-z]\*/匹配0或者更多的字母，这个表达式可以匹配空，或者只有第一个字母o,on,onc或者once.在这些情况下，正则表达式总是尽可能匹配最大的字符串。    
然后，有一些方法可以轻质使用哦非饥饿匹配，使用另一个？限定符的意义。操作符*?是一个星号匹配竟可能少的文本。操作符+？是一个+尽可能匹配少的文本。

### 一个简单的例子 ###
假设我们想要写一个正则表达式找到一篇关于the的英语文章。一个简单的模式可能是这样/the/。  
问题是这个模式可能会错失这个单词，当开始一个句子的时候，从而变成大写。这样可能会让我们写这样的密匙/[tT]he/。  
但是，我们任然会不正确地返回带有嵌入的文本。所以我们需要指定我们我们想要一个有两端单词边界的实例。/\b[tT]he\b/。  
假定我们想要这么做但是不适用/\b/。我们可能希望这样，因为/\b/不会将下划线和数字视为单词边界。但是我们还是想要找到the在一些有下划线或者数字在旁边的上下文中。我们需要指定我们想要的实例，这些实例中，字母的两边都没有字母。  
但是这样有更多的问题，它不会找到一行开始的时候的单词the。这是因为我们使用正则表达式[^a-zA-Z]避免了the的嵌入实例，意味着一定有一些没字母的字符在the前。我们可以避免这个问题，通过指定在the前面是行首或者非字母字符，同样的在行的尾部也做相同的指定。   
我们刚刚经历的过程是基于修订两种错误：false positives,不正确匹配的字符串像other或者there,false negatives,不正确的丢失像The。在实现语音和语言处理系统时，解决这两种错误的问题会反复出现。因此，要减低应用程序的总体错误率，需要两种对抗努力。  
* 提高精度
* 增加召回率 

### 一个更复杂的例子 ###
让我们尝试一个更重要的例子来说明正则表达式的力量。假定我们想要构建一个应用来帮助用户在Web上购买电脑。用户可能想要任意一台有着唱过6GHZ和500GB硬盘空间且少于1000美元的电脑。为了做这样搜索，我们首先需要有能力查找6GHz或者500GB或者Mac或者$999.99之类的表达式.在这个单元的剩下部分，我们会为这个任务制定一些简单的正则表达式。  
首先，我们完成一个价格的正则表达式。这里是一个美元符号跟着数字字符串的正则表达式。  
注意，美元符号有不同的功能而不是我们早先讨论的行尾功能。正则表达式解析器实际上是足够聪明意识这里的$并不是意味着行尾。  
现在，我们只需要处理一小部分的美元。我们会增加小数点然后两位小数。  
这个模式只允许$199.99但不能是$199。我们需要让分的部分变成可选然后确保单词边界。  
处理器速度的规格如何表示呢？这是模式：  
/\b[0-9]+ *(GHz|[Gg]igahertz)\b/  
注意，我们使用空格加星号来表示0个或者多个空格，因为很可能有额外的空格在他们旁边。我们也需要允许小数。注意使用？来使最后的s变成可选的。

### 更多操作符 ###
图2.7展示了一些常用范围的别称，这些主要是帮助节省输入。除了星号和加号，我们可使用显式数字作为计数器，将他们括在括号中。正则表达式/{3}/
意味着前一个字符或者表达式正好出现了3次。所以/a\.{24}z/会匹配a跟着24的点跟着z。  
数字范围也可以被指定所以/{n,m}/指定了从n到m次前面字符或表达式的出现。/{n,}/意味着至少n次前面表达式的出现。最后，用基于反斜杠的特殊符号来表示某些特殊字符。最常见的就是换行符和制表符。要引用reshuffle的字符像(.,*,[,和\),在他们前面加反斜杠。

### 正则表达式替代，捕捉组和ELIZA ###
正则表达式的一个重要用途是替换。举例来说，替换操作s/regexp1/pattern/ 在python和unix命令行中允许一个正则表达式特征的字符串被替换为另一个字符串。  
它非常有用，引用特定字符串子部分即匹配第一模式。举例来说，假定我们想要给文本中所有的整数加上中括号。我们想要一种方法来引用我们已经找到的整数，这样我们可以很容易地添加括号。为了这样做，我们把（和）放到第一个模式并使用数字运算符\1在得个模式中返回。  
括号和数字操作符可以指定某个字符串或表达式必须在文本中出现两次。假定我们想查找模式"the Xer they werem the Xer they will be", 我们希望两个X约束为相同的字符。我们把第一个X用括号括起来，取代第二个X用数字操作符\1。  
这里，\1会被第一个项所匹配到的任何字符串所取代。所以，这里会匹配The bigger they were, the bigger they will be 但不是 The bigger
they were, the faster they will be.  
在内存中使用括号来存储模式称为捕获组。每次使用捕获组，结果匹配存储在一个编号的寄存器中。  


## 单词和语料 ##
在我们讨论处理字词之前，我们需要决定一个单词是什么。让我们先看看一个语料，一个计算机可读的文本或语音集。Brown语料是一个来自500种不同题材书面文本收集百万单词的样本，1963-1964在布朗大学集合。下列布朗句子有多少单词？  
He stepped out into the hall, was delighted to encounter a water brother.  
如果我们不计标点符号作为单词，这个句子有13个单词，如果计入则有15个。 是否处理句号，逗号，以及别的单词取决于任务。标点符号对于发现事物的边界，以及识别一些方面方面意义（问号，感叹号，引号）至关重要。
对于一些任务，像词性标注，解析，语音合成，我们有时候会把标点符号视为独立的单词。  
在20世纪90年代早期，收集了陌生人之间的电话交谈语料库。它包含了2430条对话，平均每条6分钟。总共240小时的语音大约300万单词。这种口语的语料库没有标点符号，但在定义单词时，确实会引入其他的复杂性。让我们看一下Switchboard的一句话，话语是一个句子的口语关联。  
I do uh main- mainly business data processing  
这个表达式有两种不通顺。被打断的单词main-被称为片段。像uh和um的单词叫天冲刺或填充停顿。我们应该考虑这些作为单词嘛？它也取决于应用。如果我们构建一个语音转录系统，我们可能想要最后剔除不流利。  
大写的分词tokens像They和非大写的分词they是一样的嘛？在某些任务中
（语音识别），这些被集中在一起，而对于部分语言或被命名的实体标记，大写是一个有用的特性并被保留。  
那么词尾有变化的形式像cats对cat?这两个单词有相同的引理cat但是有不同的词形。引理是一组具有相同词干，相同主要词性和相同词义的词汇形式。字形是单词的完全变形或派生形式。对于形态学意义上的负责语言像阿拉伯语，我们经常需要处理词形还原。对于很多英语的任务，字形就足够了。  
英语中有多少单词?为了回答这个问题，我们需要区分两类来讨论。类型是语料库中不同词的数量。如果字典中的单词集是V，则类型数量就是字典的大小|V|。分词是运行单词的总数N。如果我们忽略标点符号，下面的Brown句子就有16分词和14种类型。  
They picnicked by the pool, then lay back on the grass and looked at the stars.  
当我们谈论语言中单词的数量时，我们通常指的是单词类型。  
图2.10